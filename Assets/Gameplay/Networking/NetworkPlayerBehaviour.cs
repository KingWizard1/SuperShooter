using Bolt;
using UnityEngine;

namespace SuperShooter
{

    // IInteractableState was generated by Bolt when the assembly was compiled.
    // Open the Assets -> Bolt -> Assets window to see where these definitions are found.
    public class NetworkPlayerBehaviour : Bolt.EntityBehaviour<IPlayerState>
    {

        /// <summary>The equivelent of the <see cref="UnityEngine.MonoBehaviour.Start()"/> method,
        /// but is called after the GameObject has been setup inside Bolt and exists on the network.</summary>
        public override void Attached()
        {
            // Tells Bolt to bind to the transform of the GameObject this script is attached to
            // and replicate it over the network. It is called whenever an object is instantiated on the network.
            state.SetTransforms(state.PlayerTransform, transform);


            if (entity.isOwner)
            {

                // Bind properties that need to be replicated to everyone else.



            }



            // Call virtual. Must be the last call before exiting Attached().
            AttachComplete();
        }

        public virtual void AttachComplete()
        {


        }


        //public override void SimulateOwner()
        //{
        //    var speed = 4f;
        //    var movement = Vector3.zero;

        //    if (Input.GetKey(KeyCode.W)) { movement.z += 1; }
        //    if (Input.GetKey(KeyCode.S)) { movement.z -= 1; }
        //    if (Input.GetKey(KeyCode.A)) { movement.x -= 1; }
        //    if (Input.GetKey(KeyCode.D)) { movement.x += 1; }

        //    if (movement != Vector3.zero)
        //    {
        //        Debug.Log("Movement " + movement.ToString());
        //        transform.position = transform.position + (movement.normalized * speed * BoltNetwork.FrameDeltaTime);
        //    }
        //}


    }
}